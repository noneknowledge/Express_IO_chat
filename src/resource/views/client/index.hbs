{{#section 'style'}}
<style>
    body{
    background-color: #f4f7f6;
    margin-top:20px;
}
.card {
    background: #fff;
    transition: .5s;
    border: 0;
    margin-bottom: 30px;
    border-radius: .55rem;
    position: relative;
    width: 100%;
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 10%);
}
.chat-app .people-list {
    width: 280px;
    position: absolute;
    left: 0;
    top: 0;
    padding: 20px;
    z-index: 7
}

.chat-app .chat {
    margin-left: 280px;
    border-left: 1px solid #eaeaea
}

.people-list {
    -moz-transition: .5s;
    -o-transition: .5s;
    -webkit-transition: .5s;
    transition: .5s
}

.people-list .chat-list li {
    padding: 10px 15px;
    list-style: none;
    border-radius: 3px
}

.people-list .chat-list li:hover {
    background: #efefef;
    cursor: pointer
}

.people-list .chat-list li.active {
    background: #efefef
}

.people-list .chat-list li .name {
    font-size: 15px
}

.people-list .chat-list img {
    width: 45px;
    border-radius: 50%
}

.people-list img {
    float: left;
    border-radius: 50%
}

.people-list .about {
    float: left;
    padding-left: 8px
}

.people-list .status {
    color: #999;
    font-size: 13px
}

.chat .chat-header {
    padding: 15px 20px;
    border-bottom: 2px solid #f4f7f6
}

.chat .chat-header img {
    float: left;
    border-radius: 40px;
    width: 40px
}

.chat .chat-header .chat-about {
    float: left;
    padding-left: 10px
}

.chat .chat-history {
    padding: 20px;
    border-bottom: 2px solid #fff
}

.chat .chat-history ul {
    padding: 0
}

.chat .chat-history ul li {
    list-style: none;
    margin-bottom: 30px
}

.chat .chat-history ul li:last-child {
    margin-bottom: 0px
}

.chat .chat-history .message-data {
    margin-bottom: 15px
}

.chat .chat-history .message-data img {
    border-radius: 40px;
    width: 40px
}

.chat .chat-history .message-data-time {
    color: #434651;
    padding-left: 6px
}

.chat .chat-history .message {
    color: #444;
    padding: 18px 20px;
    line-height: 26px;
    font-size: 16px;
    border-radius: 7px;
    display: inline-block;
    position: relative
}

.chat .chat-history .message:after {
    bottom: 100%;
    left: 7%;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-bottom-color: #fff;
    border-width: 10px;
    margin-left: -10px
}

.chat .chat-history .my-message {
    background: #efefef
}

.chat .chat-history .my-message:after {
    bottom: 100%;
    left: 30px;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    pointer-events: none;
    border-bottom-color: #efefef;
    border-width: 10px;
    margin-left: -10px
}

.chat .chat-history .other-message {
    background: #e8f1f3;
    text-align: right
}

.chat .chat-history .other-message:after {
    border-bottom-color: #e8f1f3;
    left: 93%
}

.chat .chat-message {
    padding: 20px
}

.online,
.offline,
.me {
    margin-right: 2px;
    font-size: 8px;
    vertical-align: middle
}

.online {
    color: #86c541
}

.offline {
    color: #e47297
}

.me {
    color: #1d8ecd
}

.float-right {
    float: right
}

.clearfix:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0
}

@media only screen and (max-width: 767px) {
    .chat-app .people-list {
        height: 465px;
        width: 100%;
        overflow-x: auto;
        background: #fff;
        left: -400px;
        display: none
    }
    .chat-app .people-list.open {
        left: 0
    }
    .chat-app .chat {
        margin: 0
    }
    .chat-app .chat .chat-header {
        border-radius: 0.55rem 0.55rem 0 0
    }
    .chat-app .chat-history {
        height: 300px;
        overflow-x: auto
    }
}

@media only screen and (min-width: 768px) and (max-width: 992px) {
    .chat-app .chat-list {
        height: 650px;
        overflow-x: auto
    }
    .chat-app .chat-history {
        height: 600px;
        overflow-x: auto
    }
}

@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1) {
    .chat-app .chat-list {
        height: 480px;
        overflow-x: auto
    }
    .chat-app .chat-history {
        height: calc(100vh - 350px);
        overflow-x: auto
    }
}
</style>
{{/section}}

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
<h5 class="py-2 text-center text-warning">Refresh page will clear your message</h5>
<div class="container">
<div class="row clearfix">
    <div class="col-lg-12">
        <div class="card chat-app">
            <div id="plist" class="people-list">    
                <ul class="list-unstyled chat-list mt-2 mb-0">                   
                    <li onclick="changeTab(0,'https://bootdey.com/img/Content/avatar/avatar2.png',event)" class="clearfix active ">
                        <img src="https://bootdey.com/img/Content/avatar/avatar2.png" alt="avatar">
                        <div class="about">
                            <div class="name">Server 1</div>
                            
                        </div></br>
                        <p id="secondText1" class="ps-2 text-secondary text-truncate"></p>
                    </li>
                    <li onclick="changeTab(1,'https://bootdey.com/img/Content/avatar/avatar1.png',event)" class="clearfix ">
                        <img src="https://bootdey.com/img/Content/avatar/avatar1.png" alt="avatar">
                        <div class="about">
                            <div class="name">Server 2</div>
                        </div></br>
                         <p id="secondText2" class="ps-2 text-secondary text-truncate"></p>
                    </li>
                   
                  
                </ul>
            </div>
            <div class="chat">
                <div class="chat-header clearfix">
                    <div class="row">
                        <div class="col-lg-6">
                            <a href="javascript:void(0);" data-toggle="modal" data-target="#view_info">
                                <img id="serverImage" src="https://bootdey.com/img/Content/avatar/avatar2.png" alt="avatar">
                            </a>
                            <div class="chat-about">
                                <h6 class="m-b-0" id="serverName">Server 1</h6>
                                <div class="status"> <span id="online-ppl"></span> (including you) - online <i class="fa fa-circle online"></i> </div>
                            </div>
                        </div>
                        <div class="col-lg-6 hidden-sm text-right">
                            <a href="javascript:void(0);" class="btn btn-outline-secondary"><i class="fa fa-camera"></i></a>
                            <a href="javascript:void(0);" class="btn btn-outline-primary"><i class="fa fa-image"></i></a>
                            <a href="javascript:void(0);" class="btn btn-outline-info"><i class="fa fa-cogs"></i></a>
                            <a href="javascript:void(0);" class="btn btn-outline-warning"><i class="fa fa-question"></i></a>
                        </div>
                    </div>
                </div>
                <div class="chat-history">
                    <ul class="m-b-0 " id="chatMonitor" style="overflow-x:hidden;height: 70vh;" >
                                                     
                        
                    </ul>
                </div>
                <div class="chat-message clearfix">
                    <div class="row border border-info overflow-hidden" style="max-height: 150px;" id = "imageInput">

                    </div>
                    {{!-- <img alt="d" class="img-fluid" src="" id="imageInput" /> --}}
                
               
                    <form id="formChat" >
                    <div class="input-group mb-0">
                       
                        <div class="input-group-prepend">
                            <button type="submit" class="input-group-text"><i class="fa fa-send"></i></button>
                        </div>
                        
                        <input id="textInput" type="text" class="form-control" placeholder="Enter text here...">     
                    </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
</div>


{{#section 'script'}}

<script src="/socket.io/socket.io.js"></script>
<script>
    
    var socket = io()
    var myRoom = []
    var currentRoom = "server1"
    var roomList = document.getElementById("plist").getElementsByClassName("active")
    var roomActive = roomList[0]
   
    var formChat = document.getElementById("formChat")
    var textInput =  document.getElementById("textInput")
    var imageInput = document.getElementById("imageInput")
    var files = []

    var chatMonitor = document.getElementById("chatMonitor")
    var online_ppl = document.getElementById("online-ppl")

    var serverName = document.getElementById("serverName")
    var serverImage =  document.getElementById("serverImage")
    var secondText1 = document.getElementById("secondText1")
    var secondText2 = document.getElementById("secondText2")
       
    const handlePaste = (event) =>{
        const {clipboardData:{items}} = event 
        for (let item of items){
            if(item.kind === 'file' && item.type.includes('image'))
            {
                var pasteFile = item.getAsFile()  
                readFile(pasteFile)
                
            }
        }
    }

    const readFile = (file) =>{
        var reader = new FileReader()
        reader.onload = function(e){
            var img = document.createElement("img")
            img.className ="col-4 px-2"
            img.src = e.target.result
            img.addEventListener("click",(e)=>{
                e.target.classList.add('bg-danger')
            })
            img.addEventListener("dblclick",(e)=>{
                files = removeImg(img)
                img.remove()
                console.log(files)
            })
            {{!-- files.push({el:img,file:file}) --}}
            files.push({el:img,file:e.target.result})
            imageInput.appendChild(img)
        }
        reader.readAsDataURL(file)
    }

    const removeImg = (deletingEl) =>{
        return files.filter(file => deletingEl !== file.el)
    }
    
    textInput.addEventListener("paste",handlePaste)

    const joinRoom = (roomName) =>{
        socket.emit("join room",roomName)
       
    }

    joinRoom('server1')

    const generateField = (data) =>{
        const {clientId,msg,date} = data
        if (clientId === socket.id){
            var html = ` <li class="clearfix">
                            <div class="message-data text-right">
                                <span class="message-data-time">${date}</span>
                                <img src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="avatar">
                            </div>
                            <div class="message other-message float-right"> ${msg} </div>
                        </li>`  
            chatMonitor.insertAdjacentHTML("beforeend", html)
            chatMonitor.scrollTop = chatMonitor.scrollHeight  
        }
        else{
            var html = ` <li class="clearfix"> 
            <div class="message-data">
            <span class="message-data-time">${date}</span>
            </div> 
            <div class="message my-message">${msg}</div></li>  `  
            chatMonitor.insertAdjacentHTML("beforeend", html)
            chatMonitor.scrollTop = chatMonitor.scrollHeight    
        }
          

    }

    const generateImage = (data) =>{
        const {clientId, files, date} = data
        
        console.log(images)
        if (clientId === socket.id){
            var images = ""
            files.forEach(file =>{
                let image = `<div class="my-2 message other-message float-right ">
                <img class="img-fluid" src="${file}" alt="image">
                </div>`
                images += image
            })

            var html = ` <li class="clearfix">
                            <div class="message-data text-right">
                                <span class="message-data-time">${date}</span>
                            </div>
                            ${images}
                        </li>`  
            chatMonitor.insertAdjacentHTML("beforeend", html)
            chatMonitor.scrollTop = chatMonitor.scrollHeight  
        }
        else{

            var images = ""
            files.forEach(file =>{
                let image = `<div class="message my-2 my-message ">
                <img class="img-fluid" src="${file}" alt="image">
                </div>`
                images += image
            })

            var html = ` <li class="clearfix"> 
            <div class="message-data">
            <span class="message-data-time">${date}</span>
            </div> 
                ${images}
            </li>  `  
            chatMonitor.insertAdjacentHTML("beforeend", html)
            chatMonitor.scrollTop = chatMonitor.scrollHeight    
        }

    }

    const changeTab = (index,src,e) =>{
    
        var element = e.target
        if(element === roomActive){
            return
        } 
        chatMonitor.innerHTML = ""
        currentRoom = `server${index+1}`
        var result = myRoom.find(room => room.name === currentRoom)
        if(result){
            online_ppl.innerHTML = result.online
        }
        serverName.innerHTML = `Server ${index+1}`
        serverImage.src = src

        var emit = true
        for(let i = 0 ; i < myRoom.length ; i++){
            if(myRoom[i].name === `server${index+1}`){
                emit = false
            }
        }
        if(emit){
            joinRoom(`server${index+1}`)
        }
        else{
            displayMultipleMessage(`server${index+1}`)
        }
        
        
        switch (index){
            case 0:
                roomActive.classList.toggle("active")
                element.classList.toggle("active")
                
                roomActive = element
                break
            case 1:
                roomActive.classList.toggle("active")
                element.classList.toggle("active")
                roomActive = element
                break
            default:
                alert("Some thing went wrong! ")
                break
        }
    }

    formChat.addEventListener('submit', function(e) {
            e.preventDefault();
            if(socket.connected)
            {
                if (textInput.value) {              
                    socket.emit('chat message', {msg:textInput.value,room:currentRoom});
                    textInput.value = '';
                }
                if (files.length > 0){
                    var images = files.map(file => file.file)
                    socket.emit('send image', {files:images,room:currentRoom})
                    files = []
                    imageInput.innerHTML = ""
                }
                
            }
            else{
                alert("Socket io connect error!")
            }
            
    })

    const displayMultipleMessage = (roomName) =>{
        var roomChangeTo =myRoom.find(room => room.name === roomName)
        if(roomChangeTo){
            roomChangeTo.message.forEach(dataMes =>{
                const {clientId,msg,date} = dataMes
                generateField({clientId,msg,date})
            })
        }
        else{
            alert("Error! Not found room to change")
        }
    }


    socket.on("room event",(data)=>{
        const {roomName,online,clientId} = data
        if(clientId === socket.id)
        {
            var trigRoom = myRoom.find(room => room.name === roomName)
            if(!trigRoom){
                myRoom.push({name:roomName,online:online,message:[]})
            }
        }
        else{
            var room = myRoom.findIndex(room => room.name === roomName)
        
            if(room !== -1){
                myRoom[room].online = online
            }
        }
       
        if(currentRoom === roomName){
             online_ppl.innerHTML = online
        }
            
     
    })

    socket.on("pass message",(data) =>{
        const {clientId,msg,room,date} = data 
        const rIndex = myRoom.findIndex(x => x.name === room)
        if(rIndex !== -1){
            myRoom[rIndex].message.push({clientId,msg,room,date})
        }
      
        else{
            alert("User join room but not found in local var")
        }

        const subject = socket.id === clientId ? "You: " : "Anonymous: "
        switch(room){
            case "server1":
                secondText1.innerHTML = subject + msg
                break
            case "server2":
                secondText2.innerHTML = subject + msg
                break
            default:
                alert("Receive message error!")
        }
        generateField({clientId,msg,date})
      
    })

    socket.on("pass image",(data)=>{
        const {clientId,files,room,date} = data 
        generateImage({clientId,files,room,date})
    })

</script>


{{/section}}